Переходим в нужную директорию и вводим
git init - git remote add origin {url репозитория на gitHub} (соединяет локальный репозиторий с удаленным, доступный по url)
git status - git add. - git commit -m

git commit -am 'Коммитит без команды add'

git init - конфигурирует Гит в папке с проектом
git config user.name "Alex_Bog"- задается имя пользователя (локально/к текущему проекту)
git config --global user.name "Alex Bog" - глобально ко всем проектам
git config user.email aleks@mail.ru - задает почту пользователя
cat .git/config - файл конфигурации Git
git config --list --global - показывает глобальную конфигурацию Git
git config -h - выводит все команды для конфигурации
git status - выводит информацию (о изменениях) как видит это сам git
git add файл - добавляет файл в "отслеживаемую дерикторию"
git commit - добавляет комментарий к проделанной работе (открывает редактор для коментариев)
git commit -m 'Комментарий' - позволяет комментировать прям напрямую
git commit -m 'Комментарий' .путь к определенному файлу - позволяет комментировать определенный файл
git add. - передает все изменения в текущем каталоге
git add -p index.html - выводит возможность комментировать определенные участки кода (изменения)
git clone {URL удаленного репозитория} - скачивает все файлы из удаленного репозитория, создавая вашу локальную копию этого репозитория
git log - показывает историю всех коммитов в данной ветке с их хэшами и сообщениями
git checkout {хеш коммита/имя ветки} - позволяет вернуться к предыдущему коммиту/ или к новой ветке
git push {имя репозитория}{ветка} - публикует коммиты из вашего локального репозитория в удаленный с данным имененм в данной его ветке
git push origin master - можно записать так, что бы не писать каждый раз url
git pull {имя репозитория}{ветка} - скачивает из данного удаленного репозитория все коммиты в данной ветке, которых еще нет в локальном репозитории
git pull origin master - аналог как и с push
git branch - выводит список локальных веток, доступных прямо сейчас в данном локальном репозитории
git branch {имя ветки} - создание новой локальной ветки из той, на которой прямо сейчас находится пользователь
git merge {имя ветки} - производит слияние данной ветки в ветку, на которой прямо сейчас  находится пользователь в виде одного нового коммита в текущую ветку
git rebase {имя ветки} - перемещает коммиты из данной ветки в ту, на которой сейчас находится пользователь
